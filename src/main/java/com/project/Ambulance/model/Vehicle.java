package com.project.Ambulance.model;

import java.util.Date;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "vehicles")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Vehicle {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int idVehicle;  // PK ‚Äì m√£ ƒë·ªãnh danh xe

    @Column(columnDefinition = "nvarchar(50) not null")
    private String vehicleName;  // T√™n/bi·ªÉn hi·ªáu xe c·ª©u th∆∞∆°ng

    @Column(columnDefinition = "nvarchar(4000)")
    private String description;  // Gi·ªõi thi·ªáu t·ªïng quan v·ªÅ xe, tr·∫°ng thi·∫øt b·ªã

    private int pricePerTrip;  // Gi√° d·ªãch v·ª• cho m·ªói chuy·∫øn

    private int standbyFee;  // Ph√≠ ch·ªù khi nh√¢n vi√™n ch·ªù t·∫°i hi·ªán tr∆∞·ªùng

    @Column(columnDefinition = "nvarchar(20)", unique = true)
    private String licensePlates;  // Bi·ªÉn s·ªë xe, ƒë·∫£m b·∫£o duy nh·∫•t

    private int modelYear;  // NƒÉm s·∫£n xu·∫•t

    private int status;
    // Tr·∫°ng th√°i xe:
    // 0 = ng∆∞ng ho·∫°t ƒë·ªông, 1 = s·∫µn s√†ng, 2 = ƒëang ph·ª•c v·ª• v.v.

    @ManyToOne
    @JoinColumn(name = "fuel_id", nullable = false)
    private FuelType fuelType;
    // Tham chi·∫øu ƒë·∫øn b·∫£ng FuelType ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt lo·∫°i nhi√™n li·ªáu

    private float fuelConsumptionPer100km;
    // L∆∞·ª£ng nhi√™n li·ªáu ti√™u th·ª• trung b√¨nh/100‚ÄØkm

    private int maxDeliveryDistance;
    // Ph·∫°m vi ph·ª•c v·ª• t·ªëi ƒëa (km)

    private int deliveryFeePerKm;
    // Ph√≠ th√™m m·ªói km v∆∞·ª£t qu√° ph·∫°m vi c∆° b·∫£n

    private int maxDistancePerDay;
    // Gi·ªõi h·∫°n qu√£ng ƒë∆∞·ªùng ch·∫°y m·ªói ng√†y

    private int extraFeePerKm;
    // Ph√≠ th√™m n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n km ng√†y

    @Column(columnDefinition = "nvarchar(2000)")
    private String equipment;
    // Danh s√°ch thi·∫øt b·ªã y t·∫ø ƒëi k√®m (v√≠ d·ª•: b√¨nh oxy, m√°y th·ªü‚Ä¶)

    @Column(columnDefinition = "nvarchar(1000)")
    private String parkingAddress;
    // V·ªã tr√≠ ƒë·ªó/chu·∫©n b·ªã xe

    @Column(columnDefinition = "nvarchar(200)")
    private String avatarImage;
    // ·∫¢nh ƒë·∫°i di·ªán xe

    @Column(columnDefinition = "nvarchar(2000)")
    private String galleryImages;
    // B·ªô ·∫£nh xe, c√≥ th·ªÉ l√† d·∫°ng JSON ho·∫∑c URL c√°ch nhau d·∫•u ph·∫©y

    @Column(columnDefinition = "nvarchar(2000)")
    private String galleryVideos;
    // B·ªô video xe, c√≥ th·ªÉ l√† d·∫°ng JSON ho·∫∑c URL c√°ch nhau d·∫•u ph·∫©y

    private int numberOfSeats;
    // S·ªë l∆∞·ª£ng gh·∫ø ng·ªìi cho khoang l√°i

    // üéØ Thi·∫øt b·ªã y t·∫ø ti√™u chu·∫©n tr√™n xe c·ª©u th∆∞∆°ng:
    private boolean oxygenTank;       // B√¨nh oxy
    private boolean ventilator;       // M√°y th·ªü
    private boolean monitor;          // M√°y theo d√µi sinh hi·ªáu
    private boolean defibrillator;    // M√°y s·ªëc tim
    private boolean stretcher;        // C√°ng c·ª©u th∆∞∆°ng
    private boolean infusionPump;     // B∆°m truy·ªÅn d·ªãch

    // üéØ B·ªï sung c√°c thu·ªôc t√≠nh chi ti·∫øt h∆°n:
    private boolean suctionMachine;   // M√°y h√∫t d·ªãch
    private boolean incubator;        // L·ªìng ·∫•p s∆° sinh
    private boolean wheelchair;       // Gh·∫ø lƒÉn
    private boolean spineBoard;       // C√°ng c·ªë ƒë·ªãnh c·ªôt s·ªëng
    private boolean nebulizer;        // M√°y x√¥ng kh√≠ dung
    private boolean emergencyKit;     // B·ªô d·ª•ng c·ª• c·∫•p c·ª©u t·ªïng h·ª£p

    private String communicationSystem; // H·ªá th·ªëng li√™n l·∫°c n·ªôi b·ªô, b·ªô ƒë√†m
    private boolean gpsTracking;        // C√≥ thi·∫øt b·ªã ƒë·ªãnh v·ªã GPS
    private boolean airConditioning;    // ƒêi·ªÅu h√≤a nhi·ªát ƒë·ªô trong khoang b·ªánh nh√¢n
    private boolean heatingSystem;      // H·ªá th·ªëng s∆∞·ªüi

    private String insurancePolicy;     // Th√¥ng tin h·ª£p ƒë·ªìng b·∫£o hi·ªÉm c·ªßa xe
    private String registrationNumber;  // M√£ ƒëƒÉng ki·ªÉm xe

    // üöë C√°c trang b·ªã h·ªó tr·ª£ v·∫≠n h√†nh v√† an to√†n:
    private boolean reverseCamera;      // Camera l√πi
    private boolean dashCamera;         // Camera h√†nh tr√¨nh
    private boolean camera360;          // Camera 360 ƒë·ªô
    private boolean parkingSensors;     // C·∫£m bi·∫øn h·ªó tr·ª£ ƒë·ªó xe
    private boolean tirePressureMonitor; // H·ªá th·ªëng c·∫£m bi·∫øn √°p su·∫•t l·ªëp (TPMS)
    private boolean laneAssist;         // H·ªó tr·ª£ gi·ªØ l√†n ƒë∆∞·ªùng
    private boolean collisionWarning;   // C·∫£nh b√°o va ch·∫°m
    private boolean blindSpotMonitor;   // C·∫£nh b√°o ƒëi·ªÉm m√π

    // üöë Ti·ªán nghi khoang b·ªánh nh√¢n:
    private boolean androidDisplay;     // M√†n h√¨nh Android ƒëi·ªÅu khi·ªÉn
    private int maxMedicalStaff;        // S·ªë l∆∞·ª£ng nh√¢n vi√™n y t·∫ø t·ªëi ƒëa
    private int maxPatients;            // S·ªë b·ªánh nh√¢n t·ªëi ƒëa c√≥ th·ªÉ v·∫≠n chuy·ªÉn

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_brand")
    @JsonIgnore
    private BrandVehicle brandVehicle;

    @OneToMany(mappedBy = "vehicle", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @EqualsAndHashCode.Exclude
    @ToString.Exclude
    @JsonIgnore
    private List<Trip> tripping;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_user")
    @JsonIgnore
    private User user;
}
